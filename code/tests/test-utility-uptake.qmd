---
format: gfm
execute: 
  cache: true
---

```{r}
library(sf)
library(tidyverse)
library(targets)
```

```{r}
setwd("../..")
tar_load(parameters)
tar_load(uptake_utility_fastest)
tar_load(uptake_commute_fastest)
names(uptake_utility_fastest)
#  [1] "route_number"              "distances"                
#  [3] "quietness"                 "gradient_smooth"          
#  [5] "geo_code1"                 "geo_code2"                
#  [7] "car"                       "foot"                     
#  [9] "bicycle"                   "all"                      
# [11] "dist_euclidean"            "public_transport"         
# [13] "taxi"                      "dist_euclidean_jittered"  
# [15] "purpose"                   "endDZ"                    
# [17] "startDZ"                   "geometry"                 
# [19] "route_hilliness"           "length_route"             
# [21] "pcycle_go_dutch"           "pcycle_ebike"             
# [23] "bicycle_go_dutch"          "bicycle_ebike"            
# [25] "mode_ratio_baseline"       "mode_ratio_go_dutch"      
# [27] "mode_ratio_ebike"          "car_go_dutch"             
# [29] "public_transport_go_dutch" "foot_go_dutch"            
# [31] "taxi_go_dutch"             "car_ebike"                
# [33] "public_transport_ebike"    "foot_ebike"               
# [35] "taxi_ebike"   
head(uptake_utility_fastest)
edinburgh = zonebuilder::zb_zone("edinburgh")
edinburgh_1km = edinburgh |>
  slice(1)
uptake_sample = uptake_utility_fastest[edinburgh_1km,]
uptake_sample |>
  select(1) |>
  plot()
uptake_1 = uptake_sample |>
  ungroup() |>
  slice(1)
plot(uptake_1)
sf::st_length(uptake_1)
summary(sf::st_length(uptake_sample))
# for all utility routes:
uptake_utility_fastest |>
  st_length() |>
  summary()
pcycle_utility = pct::uptake_pct_godutch_2020(
    distance = sf::st_length(uptake_utility_fastest) |> as.numeric(),
    gradient = uptake_utility_fastest$route_hilliness
)
summary(pcycle_utility)
mean(pcycle_utility)
mean(uptake_utility_fastest$pcycle_go_dutch) # supressed due to shopping
```

Same for all commutes:

```{r}
uptake_commute_fastest |>
  st_length() |>
  summary()
pcycle_commute = pct::uptake_pct_godutch_2020(
    distance = sf::st_length(uptake_commute_fastest) |> as.numeric(),
    gradient = uptake_commute_fastest$route_hilliness
)
summary(pcycle_commute)
mean(pcycle_commute)
mean(uptake_commute_fastest$pcycle_go_dutch) 
```

Exploring current % cycling:

```{r}
#| echo: false
#| eval: false
uptake_utility_fastest |>
  ggplot(aes(x = pcycle_go_dutch)) +
  geom_histogram() +
  # Consistent x axis
  scale_x_continuous(limits = c(0, 1))
uptake_commute_fastest |>
    ggplot(aes(x = pcycle_go_dutch)) +
    geom_histogram() +
    # Consistent x axis
    scale_x_continuous(limits = c(0, 1))
```

```{r}
uptake_combined = bind_rows(
    uptake_utility_fastest |>
        sf::st_drop_geometry() |>
        transmute(
            route_type = "utility",
            pcycle_go_dutch,
            length_route,
            route_hilliness
            ),
    uptake_commute_fastest |>
        sf::st_drop_geometry() |>
        transmute(
            route_type = "commute",
            pcycle_go_dutch,
            length_route,
            route_hilliness
            )
)
# Plot length vs % cycling
uptake_combined |>
    ggplot(aes(x = length_route, y = pcycle_go_dutch, color = route_type)) +
    geom_point(alpha = 0.01) +
    geom_smooth() +
    xlim(0, 10000)
```

The above plot shows that the uptake model is working correctly for utility trips, with cycling potential slightly below cycling potential for commute trips, for OD pairs with equivalent lengths and distances.

Let's look at the distribution of trip lengths:

```{r}
uptake_combined |>
    ggplot(aes(x = length_route, fill = route_type)) +
    geom_histogram(bins = 100) +
    xlim(0, 20000)
```

This shows that utility trips are much shorter than commute trips.
The average commute trip is `r round(mean(uptake_combined$length_route[uptake_combined$route_type == "commute"]), 0)` meters long, while the average utility trip is `r round(mean(uptake_combined$length_route[uptake_combined$route_type == "utility"]), 0)` meters long.