---
format: gfm
---

```{r}
library(sfnetworks)
library(sf)
library(tidygraph)
library(tidyverse)
library(igraph)
library(mapview)
library(dplyr)
library(rgrass)
source("R/get_orcp_cn.R")


percentile_value = 0.7
length_threshold = 10000
```

```{r}
lads = sf::read_sf("inputdata/boundaries/la_regions_2023.geojson") |> filter(LAD23NM == "City of Edinburgh") |> sf::st_transform(27700)

osm = osmactive::get_travel_network("Scotland", boundary = lads, boundary_type = "clipsrc")


cycle_net = osmactive::get_cycling_network(osm)
drive_net = osmactive::get_driving_network_major(osm)
cycle_net = osmactive::distance_to_road(cycle_net, drive_net)
cycle_net = osmactive::classify_cycle_infrastructure(cycle_net)
# filter cycle_net based on column bicycle is yes dismount adn designated
cycle_net = cycle_net |>
dplyr::filter(bicycle %in% c("yes", "dismount", "designated")) |>
dplyr::filter(cycle_segregation == "Separated cycle track") |>
dplyr::mutate(length = as.numeric(sf::st_length(geometry))) |>
dplyr::filter(length > 1) |>
sf::st_transform(crs = 27700)


snapped_lines = sf::st_snap(cycle_net, cycle_net, tolerance = 15)
group_ids = sapply(sf::st_geometry(snapped_lines), function(geometry, index, lines) {
possible_near = sf::st_intersects(geometry, lines, sparse = FALSE)
connected = which(possible_near)
unioned = sf::st_union(sf::st_geometry(lines[connected, ]))
return(unioned)
}, index = lines_index, lines = snapped_lines)

# Create a new sf object with merged lines
merged_lines = sf::st_sf(geometry = do.call(sf::st_sfc, group_ids))
merged_lines = merged_lines[!duplicated(sf::st_as_text(merged_lines$geometry)), ]    

network = merged_lines
network_multilines = network[sf::st_geometry_type(network) == "MULTILINESTRING", ]
network_lines = sf::st_cast(network_multilines, "LINESTRING")

network = network_lines
if (!inherits(network, "sfnetwork")) {
    network_sfn = sfnetworks::as_sfnetwork(network, directed = FALSE)
} else {
    network_sfn = network
}

network_igraph = tidygraph::as_tbl_graph(network_sfn)   

components = igraph::components(network_igraph)
component_ids = order(components$csize, decreasing = TRUE)  # top 10 components by size

top_components_sfn = list()  # Initialize list to store sfnetwork components

# Extract each of the top 10 components and convert them
for (component_id in component_ids) {
    component_nodes = which(components$membership == component_id)
    component_subgraph = igraph::subgraph(network_igraph, component_nodes)
    if (length(component_nodes) > 0) {  # Check if there are nodes in the component
        component_sfn = sfnetworks::as_sfnetwork(component_subgraph, directed = FALSE)
        top_components_sfn[[component_id]] = component_sfn
    } else {
        top_components_sfn[[component_id]] = NULL
    }
}

valid_components = sapply(top_components_sfn, function(x) !is.null(x) && inherits(x, "sfnetwork"))
all_edges = NULL

# Loop through each component, activate edges, convert to sf, and combine
for (i in seq_along(top_components_sfn)) {
    if (!is.null(top_components_sfn[[i]]) && inherits(top_components_sfn[[i]], "sfnetwork")) {
        # Activate edges and convert to sf
        edges_sf = top_components_sfn[[i]] |>
            sfnetworks::activate("edges") |>
            sf::st_as_sf() |>
            dplyr::mutate(component = as.factor(i))  # Add component ID
        
        # Combine into one sf object
        if (is.null(all_edges)) {
            all_edges = edges_sf
        } else {
            all_edges = rbind(all_edges, edges_sf)
        }
    }
}

sf::st_crs(all_edges) = 27700

filtered_OS_zones = all_edges |> 
                    sf::st_transform(27700) |> 
                    sf::st_zm()


url = "https://github.com/nptscot/npt/releases/download/join_orcp/NPT_zones.geojson"
NPT_zones = sf::read_sf(url)

cycle_net_NPT = stplanr::rnet_merge(filtered_OS_zones, NPT_zones, , max_angle_diff = 10, dist = 1, segment_length = 5, funs = list(all_fastest_bicycle_go_dutch = mean))          
# cycle_net_NPT = sf::st_join(filtered_OS_zones, NPT_zones, join = st_intersects)

summarized_data = cycle_net_NPT |>
    dplyr::group_by(component) |>
    dplyr::summarize(total_all_fastest_bicycle_go_dutch = sum(all_fastest_bicycle_go_dutch, na.rm = TRUE),
                        total_length = sum(as.numeric(sf::st_length(geometry)), na.rm = TRUE))

min_percentile_value = stats::quantile(summarized_data$total_all_fastest_bicycle_go_dutch, probs = percentile_value, na.rm = TRUE)

summarized_data = summarized_data |> dplyr::filter(total_all_fastest_bicycle_go_dutch > min_percentile_value)

summarized_data = summarized_data |> dplyr::filter(total_length > length_threshold)

cycle_net_NPT_filtered = cycle_net_NPT |>
filter(st_intersects(geometry, summarized_data$geometry, sparse = FALSE) |> apply(1, any))

cycle_net_NPT_filtered_buffer = sf::st_buffer(cycle_net_NPT_filtered, dist = 15)

cycle_net_with_components <- st_join(cycle_net, cycle_net_NPT_filtered_buffer[, c("geometry", "component")], join = st_within)

unioned_buffer = st_union(cycle_net_NPT_filtered_buffer)

# Then perform the intersection test
cycle_net_filtered = cycle_net_with_components[st_intersects(cycle_net_with_components, unioned_buffer, sparse = FALSE), ]

mapview::mapview(cycle_net_filtered)

```
# start to join
```{r}
endpoints = find_endpoints(cycle_net_filtered)

distances <- st_distance(endpoints)
pairs <- which(distances < units::set_units(50, "meters") & distances > units::set_units(0, "meters"), arr.ind = TRUE)
pairs <- pairs[pairs[, "row"] < pairs[, "col"], ]

unique_indices <- unique(as.vector(pairs))
filtered_endpoints <- endpoints[unique_indices, ]
filtered_endpoints$id <- seq_len(nrow(filtered_endpoints))

mapview::mapview(cycle_net_filtered) + mapview::mapview(filtered_endpoints)
```

```{r}
create_line <- function(pt1, pt2) {
  st_sfc(st_linestring(rbind(st_coordinates(pt1), st_coordinates(pt2))), crs = st_crs(pt1))
}

# Generate lines connecting these endpoint pairs
connection_lines <- do.call(rbind, 
  lapply(seq_len(nrow(pairs)), function(i) {
    pt1_index <- pairs[i, "row"]
    pt2_index <- pairs[i, "col"]
    # Extract the points directly since each row is a point
    pt1 <- endpoints[pt1_index, ]
    pt2 <- endpoints[pt2_index, ]
    create_line(pt1, pt2)
  })
)


if (!inherits(connection_lines, "sf")) {
  # Combine LINESTRING objects into a single 'sf' collection
  connection_lines_sf <- st_sfc(connection_lines, crs = st_crs(cycle_net_filtered))
} else {
  connection_lines_sf <- connection_lines
}
if (st_crs(cycle_net_filtered) != st_crs(connection_lines_sf)) {
    st_crs(connection_lines_sf) <- st_crs(cycle_net_filtered_i)
}

geometries_cycle_net <- st_geometry(cycle_net_filtered)
geometries_connection_lines <- st_geometry(connection_lines_sf)

# Combine these geometries into a single collection
all_geometries <- st_geometrycollection(c(geometries_cycle_net, geometries_connection_lines))

all_geometries_sfc <- st_sfc(all_geometries, crs = st_crs(cycle_net_filtered))


final_network <- st_sf(geometry = all_geometries_sfc)

plot(final_network)
```


```{r}
init_grass_environment <- function() {
  gisBase = "/usr/lib/grass78"  # Ensure this is set to your GRASS installation path
  gisDbase = "/root/grassdata"  # Set to your GRASS database directory
  location = "OSM_Dundee_City"  # Define your location
  mapset = "PERMANENT"  # Define your mapset
  
  initGRASS(gisBase = gisBase,
            gisDbase = gisDbase,
            location = location,
            mapset = mapset,
            override = TRUE)
}

# Fix network connectivity
fix_osm_network_connectivity <- function(osm_data) {
  # Temporarily write to file to import to GRASS
  temp_file <- tempfile(fileext = ".geojson")
  st_write(osm_data, temp_file, delete_dsn = TRUE)
  
  # Import network data into GRASS
  execGRASS("v.in.ogr", flags = c("overwrite", "o"), 
            parameters = list(input = temp_file, 
                              output = "network"))
  
  # Clean the network
  execGRASS("v.clean", flags = c("overwrite"),
            parameters = list(input = "network", 
                              output = "fixed_network", 
                              tool = "snap", 
                              threshold = 100))
  
  # Export the cleaned network from GRASS
  execGRASS("v.out.ogr", flags = c("overwrite"), 
            parameters = list(input = "fixed_network", 
                              output = temp_file, 
                              format = "GeoJSON"))
  
  # Read the cleaned network back into R
  cleaned_network <- st_read(temp_file)
  unlink(temp_file)  # Clean up the temporary file
  return(cleaned_network)
}
```