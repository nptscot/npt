---
format: gfm
---

```{r}
library(sfnetworks)
library(sf)
library(tidygraph)
library(tidyverse)
library(igraph)
library(mapview)
library(dplyr)
```

```{r}
f = "inputdata/boundaries/la_regions_2023.geojson"
if (!file.exists(f)) {
    f = "../../inputdata/boundaries/la_regions_2023.geojson"
}
lads = sf::read_sf(f) |> filter(LAD23NM == "City of Edinburgh") |> sf::st_transform(27700)

osm = osmactive::get_travel_network("Scotland", boundary = lads, boundary_type = "clipsrc")


cycle_net = osmactive::get_cycling_network(osm)
drive_net = osmactive::get_driving_network_major(osm)
cycle_net = osmactive::distance_to_road(cycle_net, drive_net)
cycle_net = osmactive::classify_cycle_infrastructure(cycle_net)
# filter cycle_net based on column bicycle is yes dismount adn designated
cycle_net = cycle_net |>
dplyr::filter(bicycle %in% c("yes", "dismount", "designated")) |>
dplyr::filter(cycle_segregation == "Separated cycle track") |>
dplyr::mutate(length = as.numeric(sf::st_length(geometry))) |>
dplyr::filter(length > 1) |>
sf::st_transform(crs = 27700)
```

```{r}
#| label: cycle_net-plot
plot(cycle_net)
```

```{r}
#| label: sfnetworks_cycle_net
cycle_net_sfn = cycle_net |>
  sf::st_cast("LINESTRING") |>
  as_sfnetwork()
```

```{r}
#| label: cycle_net_group_simple
cycle_net_group1 = cycle_net_sfn |>
  activate(edges) |>
  mutate(group_simple = group_biconnected_component()) 
# How many groups?
cycle_net_group1 |>
  pull(group_simple) |>
  unique() |>
  length()
```

Let's plot the network near The Meadows in Edinburgh.

```{r}
#| label: cycle_net_meadows_edge_groups
the_meadows = cycle_net |>
  dplyr::filter(name == "South Meadow Walk") 
the_meadows_500m = sf::st_buffer(the_meadows, 500)
cycle_net_meadows = cycle_net_group1 |>
  sf::st_filter(the_meadows_500m)
# plot(cycle_net_meadows)
the_meadows_sf = cycle_net_meadows |>
  activate(edges) |>
  sf::st_as_sf()
table(the_meadows_sf$group_simple)
the_meadows_sf |>
  select(group_simple) |>
  plot()
```

Let's try another way to get the connected components.

```{r}
cycle_net_buffered = cycle_net |>
  sf::st_buffer(100) 

```

The above shows that there are 5 groups. Let's try to get them all into the same group.


```{r}

```