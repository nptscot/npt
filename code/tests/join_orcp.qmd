---
format: gfm
---

```{r}
library(sfnetworks)
library(sf)
library(tidygraph)
library(tidyverse)
library(igraph)
library(mapview)
library(dplyr)
```

```{r}
lads = sf::read_sf("inputdata/boundaries/la_regions_2023.geojson") |> filter(LAD23NM == "City of Edinburgh") |> sf::st_transform(27700)

osm = osmactive::get_travel_network("Scotland", boundary = lads, boundary_type = "clipsrc")


cycle_net = osmactive::get_cycling_network(osm)
drive_net = osmactive::get_driving_network_major(osm)
cycle_net = osmactive::distance_to_road(cycle_net, drive_net)
cycle_net = osmactive::classify_cycle_infrastructure(cycle_net)
# filter cycle_net based on column bicycle is yes dismount adn designated
cycle_net = cycle_net |>
dplyr::filter(bicycle %in% c("yes", "dismount", "designated")) |>
dplyr::filter(cycle_segregation == "Separated cycle track") |>
dplyr::mutate(length = as.numeric(sf::st_length(geometry))) |>
dplyr::filter(length > 1) |>
sf::st_transform(crs = 27700)

group_ids = sapply(sf::st_geometry(cycle_net), function(geometry, index, lines) {
possible_near = sf::st_intersects(geometry, lines, sparse = FALSE)
connected = which(possible_near)
unioned = sf::st_union(sf::st_geometry(lines[connected, ]))
return(unioned)
}, index = lines_index, lines = cycle_net)

# Create a new sf object with merged lines
merged_lines = sf::st_sf(geometry = do.call(sf::st_sfc, group_ids))
merged_lines = merged_lines[!duplicated(sf::st_as_text(merged_lines$geometry)), ]    

network = merged_lines
network_multilines = network[sf::st_geometry_type(network) == "MULTILINESTRING", ]
network_lines = sf::st_cast(network_multilines, "LINESTRING")

network = network_lines
if (!inherits(network, "sfnetwork")) {
    network_sfn = sfnetworks::as_sfnetwork(network, directed = FALSE)
} else {
    network_sfn = network
}
mapview(network)
```