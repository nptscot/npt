---
format: gtm
---

```{r}
region = region_names[5]
message("Processing coherent network for region: ", region)
region_snake = snakecase::to_snake_case(region)
coherent_area = cities_region_names[[region]]

cnet_path = file.path(output_folder, region_snake, "combined_network_tile.geojson")
combined_net = sf::read_sf(cnet_path) |>
    sf::st_transform(crs = "EPSG:27700")

folder_path = file.path(output_folder, region_snake, "coherent_networks_OS/")

city = coherent_area[3] 

message("Generating coherent network for: ", city)
city_boundary = filter(lads, LAD23NM == city) |>
sf::st_transform(crs = "EPSG:27700")

combined_net_city_boundary = combined_net[sf::st_union(city_boundary), , op = sf::st_intersects]

min_percentile_value = stats::quantile(combined_net_city_boundary$all_fastest_bicycle_go_dutch, probs = parameters$coherent_percentile[1], na.rm = TRUE)

os_scotland_city_boundary = os_scotland[sf::st_union(city_boundary), , op = sf::st_intersects]

os_combined_net_city_boundary = corenet::cohesive_network_prep(
base_network = os_scotland_city_boundary,
influence_network = combined_net_city_boundary,
city_boundary,
crs = "EPSG:27700",
key_attribute = "road_function",
attribute_values = c("A Road", "B Road", "Minor Road", "Local Road" , "Secondary Access Road" , "Local Access Road" )
)

os_combined_net_city_boundary = os_combined_net_city_boundary[os_combined_net_city_boundary$form_of_way != "Slip Road", ]

cohesive_network_city_boundary_ABMLroad = corenet::corenet(combined_net_city_boundary, os_combined_net_city_boundary, city_boundary,
key_attribute = "all_fastest_bicycle_go_dutch",
crs = "EPSG:27700", maxDistPts = 3000, minDistPts = 2, npt_threshold = min_percentile_value,
road_scores = list("A Road" = 1, "B Road" = 1, "Minor Road" = 100, "Local Road" = 100, "Secondary Access Road" = 100 , "Local Access Road" = 100), n_removeDangles = 6, penalty_value = 1, group_column = "name_1"
)


os_combined_net_city_boundary = corenet::cohesive_network_prep(
base_network = os_scotland_city_boundary,
influence_network = combined_net_city_boundary,
city_boundary,
crs = "EPSG:27700",
key_attribute = "road_function",
attribute_values = c("A Road")
)

os_combined_net_city_boundary = os_combined_net_city_boundary[os_combined_net_city_boundary$form_of_way != "Slip Road", ]

cohesive_network_city_boundary_Aroad = corenet::corenet(combined_net_city_boundary, os_combined_net_city_boundary, city_boundary,
key_attribute = "all_fastest_bicycle_go_dutch",
crs = "EPSG:27700", maxDistPts = 3000, minDistPts = 2, npt_threshold = min_percentile_value,
road_scores = list("A Road" = 1), n_removeDangles = 6, penalty_value = 1, group_column = "name_1"
)

os_combined_net_city_boundary = corenet::cohesive_network_prep(
base_network = os_scotland_city_boundary,
influence_network = combined_net_city_boundary,
city_boundary,
crs = "EPSG:27700",
key_attribute = "road_function",
attribute_values = c("A Road", "B Road")
)

os_combined_net_city_boundary = os_combined_net_city_boundary[os_combined_net_city_boundary$form_of_way != "Slip Road", ]

cohesive_network_city_boundary_ABroad = corenet::corenet(combined_net_city_boundary, os_combined_net_city_boundary, city_boundary,
key_attribute = "all_fastest_bicycle_go_dutch",
crs = "EPSG:27700", maxDistPts = 3000, minDistPts = 2, npt_threshold = min_percentile_value,
road_scores = list("A Road" = 1, "B Road" = 1), n_removeDangles = 6, penalty_value = 1, group_column = "name_1"
)


os_combined_net_city_boundary = corenet::cohesive_network_prep(
base_network = os_scotland_city_boundary,
influence_network = combined_net_city_boundary,
city_boundary,
crs = "EPSG:27700",
key_attribute = "road_function",
attribute_values = c("A Road", "B Road", "Minor Road" )
)

os_combined_net_city_boundary = os_combined_net_city_boundary[os_combined_net_city_boundary$form_of_way != "Slip Road", ]

cohesive_network_city_boundary_ABMroad = corenet::corenet(combined_net_city_boundary, os_combined_net_city_boundary, city_boundary,
key_attribute = "all_fastest_bicycle_go_dutch",
crs = "EPSG:27700", maxDistPts = 3000, minDistPts = 2, npt_threshold = min_percentile_value,
road_scores = list("A Road" = 1, "B Road" = 1, "Minor Road" = 100), n_removeDangles = 6, penalty_value = 1, group_column = "name_1"
)

mapview::mapview(cohesive_network_city_boundary_Aroad, color ="red") + mapview::mapview(cohesive_network_city_boundary_ABroad, color ="orange")+ mapview::mapview(cohesive_network_city_boundary_ABMroad ,color ="blue") + mapview::mapview(cohesive_network_city_boundary_ABMLroad, color ="green")
```